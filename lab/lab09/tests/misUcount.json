{"answerDict": {">>> from link import *\n>>> link = Link(1, Link(2, Link(3)))\n>>> link.first\n1\n>>> link.rest.first\n2\n>>> link.rest.rest.rest is Link.empty\nTrue\n>>> link.first = 9001\n>>> link.first\n9001\n>>> link.rest = link.rest.rest\n>>> link.rest.first\n3\n>>> link = Link(1)\n>>> link.rest = link\n>>> link.rest.rest.rest.rest.first\nLOCKED_ANSWER\n>>> link = Link(2, Link(3, Link(4)))\n>>> link2 = Link(1, link)\n>>> link2.first\nLOCKED_ANSWER\n>>> link2.rest.first\nLOCKED_ANSWER\n>>> print_link(link2)\nLOCKED_ANSWER\n": ["['Error']"], ">>> from link import *\n>>> link = Link(1, Link(2, Link(3)))\n>>> link.first\n1\n>>> link.rest.first\n2\n>>> link.rest.rest.rest is Link.empty\nTrue\n>>> link.first = 9001\n>>> link.first\n9001\n>>> link.rest = link.rest.rest\n>>> link.rest.first\n3\n>>> link = Link(1)\n>>> link.rest = link\n>>> link.rest.rest.rest.rest.first\n1\n>>> link = Link(2, Link(3, Link(4)))\n>>> link2 = Link(1, link)\n>>> link2.first\n1\n>>> link2.rest.first\nLOCKED_ANSWER\n>>> print_link(link2)\nLOCKED_ANSWER\n": ["['']"], ">>> from link import *\n>>> link = Link(1, Link(2, Link(3)))\n>>> link.first\n1\n>>> link.rest.first\n2\n>>> link.rest.rest.rest is Link.empty\nTrue\n>>> link.first = 9001\n>>> link.first\n9001\n>>> link.rest = link.rest.rest\n>>> link.rest.first\nLOCKED_ANSWER\n>>> link = Link(1)\n>>> link.rest = link\n>>> link.rest.rest.rest.rest.first\nLOCKED_ANSWER\n>>> link = Link(2, Link(3, Link(4)))\n>>> link2 = Link(1, link)\n>>> link2.first\nLOCKED_ANSWER\n>>> link2.rest.first\nLOCKED_ANSWER\n>>> print_link(link2)\nLOCKED_ANSWER\n": ["['2']", "['empty']"], ">>> class IteratorA:\n...    def __init__(self):\n...        self.start = 10\n...    def __next__(self):\n...        if self.start > 100:\n...            raise StopIteration\n...        self.start += 20\n...        return self.start\n...    def __iter__(self):\n...        return self\n>>> iterator = IteratorA()\n>>> [num for num in iterator]\nLOCKED_ANSWER\n>>> [num for num in iterator]\nLOCKED_ANSWER\n": ["['[10, 30, 50, 70, 90]']", "['[30, 50, 70, 90]']", "['[30,50,70,90]']"], ">>> from link import *\n>>> link = Link(1, Link(2, Link(3)))\n>>> link.first\n1\n>>> link.rest.first\n2\n>>> link.rest.rest.rest is Link.empty\nTrue\n>>> link.first = 9001\n>>> link.first\n9001\n>>> link.rest = link.rest.rest\n>>> link.rest.first\n3\n>>> link = Link(1)\n>>> link.rest = link\n>>> link.rest.rest.rest.rest.first\n1\n>>> link = Link(2, Link(3, Link(4)))\n>>> link2 = Link(1, link)\n>>> link2.first\n1\n>>> link2.rest.first\n2\n>>> print_link(link2)\nLOCKED_ANSWER\n": ["['[1,[2,[3,[4]]]]']", "['[1,[2,[3,[4,()]]]]']", "['<1 <2 <3 <4>>>>']", "['<1 <2 <3 <4> > > >']", "['<1 2 3 4 >']"]}, "countData": {"outoforderrtnvsinc-sloppy": 1, "outoforderstopitervsinc": 3, "outoforderstopitervsinc-sloppy": 3, "sloppylnkattreval": 2, "sloppyifcondition-sloppy": 2, "outoforderstopitervsinc-iteratornext": 3, "lnklstcantcycle-linkoopgetter": 1, "outoforderrtnvsinc": 1, "lnklstcantcycle": 1, "outoforderrtnvsinc-iteratornext": 1, "sloppyifcondition": 2, "sloppylnkattreval-linkdefine": 2}}